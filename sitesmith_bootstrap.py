# sitesmith_bootstrap.py
# One-shot bootstrap: generate site, add Pages workflow, init git, (optionally) create repo via gh, and push.
from pathlib import Path
import subprocess, sys, shutil, argparse, datetime

ROOT = Path(__file__).parent.resolve()

INDEX_HTML = """<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>{title}</title>
  <meta name="description" content="A tiny static site generated by SiteSmith Bootstrap."/>
  <style>
    :root{{--brand:{brand_color};--bg:#0b0b0d;--fg:#e8e8ea;--card:#131319;--ring:#27283a}}
    *{{box-sizing:border-box}}html,body{{margin:0;padding:0}}
    body{{font:16px/1.6 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;background:var(--bg);color:var(--fg)}}
    .container{{max-width:940px;margin:0 auto;padding:24px}}
    .card{{background:var(--card);border:1px solid var(--ring);border-radius:16px;padding:20px;margin:16px 0}}
    .btn{{display:inline-block;padding:10px 16px;border-radius:12px;background:var(--brand);color:#fff;font-weight:600;text-decoration:none}}
    footer{{margin-top:48px;opacity:.8}}
  </style>
</head>
<body>
  <div class="container">
    <h1>üî• {title}</h1>
    <p class="card">This page was generated automatically by <strong>sitesmith_bootstrap.py</strong>.</p>
    <h2>Affiliate Disclosure</h2>
    <p class="card">This site may contain affiliate links. We may earn a commission at no extra cost to you.</p>
    <p><a class="btn" href="#">Demo Button</a></p>
    <footer>¬© {year} {brand}</footer>
  </div>
</body>
</html>
"""

WORKFLOW_YML = """name: Deploy static site to Pages
on:
  push:
    branches: ["main"]
  workflow_dispatch: {}
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
"""

def run(cmd, check=True):
    print(">", " ".join(cmd))
    return subprocess.run(cmd, check=check)

def ensure_git_identity():
    """Helpfully set identity if missing."""
    need_name = subprocess.run(["git", "config", "--get", "user.name"], capture_output=True, text=True)
    need_email = subprocess.run(["git", "config", "--get", "user.email"], capture_output=True, text=True)
    if not need_name.stdout.strip() or not need_email.stdout.strip():
        print("‚ÑπÔ∏è  Git user.name / user.email not set. Set them globally like:")
        print('   git config --global user.name "Your Name"')
        print('   git config --global user.email "your@email"')

def write_files(brand, site_url, brand_color):
    year = datetime.date.today().year
    title = f"{brand} ‚Äî Test Site"

    # folders
    (ROOT / "site").mkdir(parents=True, exist_ok=True)
    (ROOT / ".github" / "workflows").mkdir(parents=True, exist_ok=True)

    # minimal site
    (ROOT / "site" / ".nojekyll").write_text("\n", encoding="utf-8")
    (ROOT / "site" / "index.html").write_text(
        INDEX_HTML.format(title=title, brand=brand, year=year, brand_color=brand_color),
        encoding="utf-8"
    )

    # workflow
    (ROOT / ".github" / "workflows" / "deploy.yml").write_text(WORKFLOW_YML, encoding="utf-8")

def main():
    ap = argparse.ArgumentParser(description="Bootstrap a minimal GitHub Pages site (generate+git+push).")
    ap.add_argument("--brand", default="SiteSmith", help='Brand/site name, e.g. "My Test Blog"')
    ap.add_argument("--site_url", required=True, help="Full site URL, e.g. https://USERNAME.github.io/my-test-site")
    ap.add_argument("--repo_name", required=True, help="GitHub repo name, e.g. my-test-site")
    ap.add_argument("--brand_color", default="#ef4444")
    ap.add_argument("--create_repo", action="store_true",
                    help="Create the GitHub repo via `gh repo create` (requires GitHub CLI)")
    ap.add_argument("--remote", default="", help="Remote URL (https://github.com/USER/REPO.git). If omitted and --create_repo not used, script will print the next steps.")
    args = ap.parse_args()

    print("üîß Generating files...")
    write_files(args.brand, args.site_url.rstrip("/"), args.brand_color)
    print("‚úÖ Files written: site/, .github/workflows/deploy.yml")

    # init git (idempotent)
    if not (ROOT / ".git").exists():
        run(["git", "init"])
    else:
        print("‚ÑπÔ∏è  Git repo already exists, continuing.")

    ensure_git_identity()

    # add & commit
    run(["git", "add", "."])
    # If this is the very first commit, use "Initial"; else "update"
    msg = "seed: SiteSmith bootstrap" if not (ROOT / ".git" / "refs" / "heads" / "main").exists() else "update: regenerate"
    # Create main branch if needed
    run(["git", "commit", "-m", msg])
    run(["git", "branch", "-M", "main"])

    # Create repo via gh if requested
    if args.create_repo:
        if shutil.which("gh") is None:
            print("‚ùå --create_repo was requested but GitHub CLI (gh) is not installed.")
            print("   Install from https://cli.github.com/ or omit --create_repo and set --remote manually.")
            sys.exit(1)
        print("üåê Creating repo on GitHub via gh...")
        run(["gh", "repo", "create", args.repo_name, "--public", "--source=.", "--remote=origin", "--push"])
        print("üöÄ Pushed and created repo via gh.")
        print("üîé Open the Actions tab in GitHub; Pages will deploy from the workflow.")
        return

    # Otherwise, set remote if provided
    if args.remote:
        run(["git", "remote", "remove", "origin"], check=False)  # ignore if it doesn't exist
        run(["git", "remote", "add", "origin", args.remote])
        print("‚¨ÜÔ∏è  Pushing to GitHub...")
        run(["git", "push", "-u", "origin", "main"])
        print("üöÄ Pushed to GitHub. Open the repo ‚Üí Actions to see Pages deploy.")
    else:
        print("\n‚ÑπÔ∏è  No remote provided and --create_repo not used.")
        print("   Next steps:")
        print(f"   1) Create an empty repo named {args.repo_name} on GitHub (Public, no README).")
        print(f"   2) Then run:")
        print(f"      git remote add origin https://github.com/YOURUSER/{args.repo_name}.git")
        print(f"      git push -u origin main")
        print("   The workflow will publish site/ to GitHub Pages.")

if __name__ == "__main__":
    main()
