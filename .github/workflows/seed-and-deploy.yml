name: Seed + Build + Deploy

on:
  workflow_dispatch:
    inputs:
      brand:
        description: "Brand / Site name"
        required: false
        default: "My Test Blog"
      site_url:
        description: "Full site URL (GitHub Pages): https://USERNAME.github.io/REPO"
        required: false
        default: "https://calcifergtp-glitch.github.io/my-test-site"
      amazon_tag:
        description: "Amazon affiliate tag (optional)"
        required: false
        default: "yourtag-20"
      overwrite:
        description: "Overwrite existing files? (yes/no)"
        required: false
        default: "yes"

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  seed-build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Seed files (create/overwrite project structure)
        if: ${{ github.event.inputs.overwrite == 'yes' || github.event.inputs.overwrite == 'YES' }}
        run: |
          set -e
          mkdir -p ssg data site .github/workflows

          ################################################################################
          # build.py  â€” Orchestrator with RSS, pagination, archive, author box, etc.
          ################################################################################
          cat > build.py <<'PY'
          from pathlib import Path
          import argparse, json

          from ssg.content import load_keywords, call_openai
          from ssg.themes import choose_theme
          from ssg.render import (
              prepare_dirs, analytics_snippet, write_post, write_standard_pages,
              build_category_pages, build_tag_pages, rebuild_index,
              write_sitemap_and_robots, write_search_index, slugify,
              write_feed, write_404, write_archive_pages
          )

          def main():
              ap = argparse.ArgumentParser(description="Generate static blog.")
              ap.add_argument("--brand", default="${{ github.event.inputs.brand }}")
              ap.add_argument("--site_url", required=False, default="${{ github.event.inputs.site_url }}")
              ap.add_argument("--amazon_tag", default="${{ github.event.inputs.amazon_tag }}")
              ap.add_argument("--keywords_file", default="data/keywords.json")
              ap.add_argument("--limit", type=int, default=6)
              ap.add_argument("--force_theme")
              ap.add_argument("--audience", default="readers")
              ap.add_argument("--domain", default="example.com")
              ap.add_argument("--analytics", default="", help='Examples: "plausible:domain" or "ga4:G-XXXX" or both comma-separated')
              ap.add_argument("--author_name", default="Staff Writer")
              ap.add_argument("--author_url", default="")
              ap.add_argument("--author_bio", default="We test products and write simple, trustworthy guides.")
              args = ap.parse_args()

              base_prefix = "/" + args.site_url.rstrip("/").split("github.io/")[-1]
              if base_prefix == "/": base_prefix = ""

              ROOT = Path(__file__).parent
              SITE, POSTS, DATA = prepare_dirs(ROOT)

              theme_key, theme = choose_theme(args.force_theme)
              print("ðŸŽ¨ Theme:", theme_key)

              analytics_html = analytics_snippet(args.analytics)

              keywords = load_keywords(ROOT / args.keywords_file)
              if not keywords:
                  (ROOT / args.keywords_file).write_text(json.dumps({
                      "keywords": ["best air fryer 2025","air fryer vs convection oven","cheap air fryer recipes"]
                  }, indent=2), encoding="utf-8")
                  keywords = ["best air fryer 2025","air fryer vs convection oven","cheap air fryer recipes"]

              picked = keywords[: max(0, args.limit)]
              posts_meta, collected = [], []

              for kw in picked:
                  data = call_openai(kw)
                  slug = slugify(kw)
                  category = data.get("category", "General")
                  tags = data.get("tags", [])
                  title = data.get("title") or kw.title()

                  payload = {
                      "keyword": kw,
                      "data": data,
                      "slug": slug,
                      "category": category,
                      "tags": tags,
                      "title": title,
                      "author_name": args.author_name,
                      "author_url": args.author_url,
                      "author_bio": args.author_bio,
                  }
                  collected.append(payload)
                  posts_meta.append({"slug": slug, "title": title, "category": category, "tags": tags})

              for payload in collected:
                  related = [m for m in posts_meta if m["slug"] != payload["slug"]][:4]
                  write_post(args.brand, args.site_url, base_prefix, payload, args.amazon_tag, theme, related, analytics_html)
                  print("âœ” Wrote post:", payload["slug"])

              write_standard_pages(args.brand, args.site_url, base_prefix, theme, analytics_html,
                                  audience=args.audience, domain=args.domain)
              if posts_meta:
                  build_category_pages(args.brand, args.site_url, base_prefix, theme, posts_meta, analytics_html)
                  build_tag_pages(args.brand, args.site_url, base_prefix, theme, posts_meta, analytics_html)
                  write_archive_pages(args.brand, args.site_url, base_prefix, theme, posts_meta, analytics_html)

              desc = f"Latest articles: " + ", ".join([c['title'] for c in collected]) if collected else f"{args.brand} blog"
              rebuild_index(args.brand, desc, args.site_url, base_prefix, theme, posts_meta, analytics_html)
              write_sitemap_and_robots(args.site_url, posts_meta)
              write_search_index(posts_meta)
              write_feed(args.brand, args.site_url, posts_meta)
              write_404(args.brand, args.site_url, base_prefix, theme, analytics_html)
              print("âœ… Site built successfully.")

          if __name__ == "__main__":
              main()
          PY

          ################################################################################
          # ssg/themes.py â€” tiny theme map (Bulma)
          ################################################################################
          cat > ssg/themes.py <<'PY'
          THEMES = {
            "bulma": {
              "css": "https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.4/css/bulma.min.css",
              "container_open": "<section class='section'><div class='container'>",
              "container_close": "</div></section>",
            }
          }
          def choose_theme(force=None):
              return (force or "bulma"), THEMES["bulma"]
          PY

          ################################################################################
          # ssg/templates.py â€” homepage, post, page, 404 (escaped braces)
          ################################################################################
          cat > ssg/templates.py <<'PY'
          # NOTE: Double braces {{ }} to escape Python .format braces.
          INDEX_SHELL = """<!doctype html>
          <html lang="en"><head>
          <meta charset="utf-8"/>
          <meta name="viewport" content="width=device-width,initial-scale=1"/>
          <title>{brand} â€” Blog</title>
          <meta name="description" content="{desc}"/>
          <link rel="canonical" href="{site_url}/"/>
          <link rel="alternate" type="application/atom+xml" title="{brand} Feed" href="{base_prefix}/feed.xml">
          <link rel="stylesheet" href="{theme_css}">
          {analytics}
          <style>
          :root {{ --brand:#2f6feb; }}
          .navbar {{ background:var(--brand); }}
          .navbar a, .navbar .navbar-item {{ color:#fff; }}
          .card-image img {{ object-fit:cover; width:100%; height:180px }}
          .pagination-list .pagination-link.is-current {{ background:var(--brand); color:#fff; border-color:var(--brand);}}
          </style>
          </head><body>
          <nav class="navbar"><div class="container">
            <div class="navbar-brand">
              <a class="navbar-item" href="{base_prefix}/">ðŸ”¥ {brand}</a>
            </div>
            <div class="navbar-menu">
              <div class="navbar-start">
                <a class="navbar-item" href="{base_prefix}/">Home</a>
                <a class="navbar-item" href="{base_prefix}/about.html">About</a>
                <a class="navbar-item" href="{base_prefix}/contact.html">Contact</a>
                <a class="navbar-item" href="{base_prefix}/privacy.html">Privacy</a>
                <a class="navbar-item" href="{base_prefix}/disclosure.html">Disclosure</a>
                <a class="navbar-item" href="{base_prefix}/archive.html">Archive</a>
                <a class="navbar-item" href="{base_prefix}/sitemap.xml">Sitemap</a>
                <a class="navbar-item" href="{base_prefix}/feed.xml">RSS</a>
              </div>
            </div>
          </div></nav>

          {container_open}
          <div class="columns">
            <div class="column is-three-quarters">
              <h2 class="title is-4">Latest Posts</h2>
              {search_bar}
              <div class="columns is-multiline">
                {post_cards}
              </div>
              {pagination}
            </div>
            <aside class="column">
              <div class="box"><h3 class="title is-5">Categories</h3>{category_list}</div>
              <div class="box"><h3 class="title is-5">Tags</h3><div class="tags">{tag_cloud}</div></div>
              <div class="box"><h3 class="title is-6">Affiliate Disclosure</h3><p>We may earn a commission from links on this page.</p></div>
            </aside>
          </div>
          <footer class="footer"><div class="content has-text-centered">
            <p>Â© {year} {brand}</p>
          </div></footer>
          {container_close}
          <script src="{base_prefix}/assets/js/telemetry.js"></script>
          </body></html>
          """

          POST_TPL = """<!doctype html>
          <html lang="en"><head>
          <meta charset="utf-8"/>
          <meta name="viewport" content="width=device-width,initial-scale=1"/>
          <title>{title} â€” {brand}</title>
          <meta name="description" content="{meta_desc}"/>
          <link rel="canonical" href="{site_url}/posts/{slug}/"/>
          <link rel="stylesheet" href="{theme_css}">
          {analytics}
          <style>.tag.is-link {{ text-decoration:none }}</style>
          </head><body>
          {container_open}
          <h1 class="title">{title}</h1>
          <p class="subtitle">Published {date}</p>
          <figure class="image is-16by9" style="margin-bottom:1rem"><img src="{hero_img}" alt="{title}" loading="lazy"></figure>
          <div class="content">
            <p><span class="tag is-info is-light">Category</span> <a class="tag is-link is-light" href="{base_prefix}/category/{cat_slug}/">{category}</a></p>
            <p><span class="tag is-info is-light">Tags</span> {tags_html}</p>
            {inline_cta}
            {body_html}
            {intext_related}
            {sources_html}
            <hr/>
            <p><strong>Share:</strong>
              <a href="https://twitter.com/intent/tweet?url={site_url}/posts/{slug}/&text={title}" target="_blank" rel="noopener nofollow">X</a> Â·
              <a href="https://www.facebook.com/sharer/sharer.php?u={site_url}/posts/{slug}/" target="_blank" rel="noopener nofollow">Facebook</a> Â·
              <a href="https://www.reddit.com/submit?url={site_url}/posts/{slug}/&title={title}" target="_blank" rel="noopener nofollow">Reddit</a>
            </p>
            <article class="box" style="margin-top:1rem">
              <p class="title is-6">About the author</p>
              <p><strong>{author_name}</strong> â€” {author_bio} {author_link}</p>
            </article>
          </div>
          {related_html}
          <hr/><h2 class="title is-5">Top Pick</h2>{top_pick_box}
          {comparison_table}
          <footer class="footer"><div class="content has-text-centered"><p>Â© {year} {brand}</p></div></footer>
          {container_close}
          <script src="{base_prefix}/assets/js/telemetry.js"></script>
          </body></html>
          """

          PAGE_TPL = """<!doctype html>
          <html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
          <title>{title} â€” {brand}</title>
          <link rel="canonical" href="{site_url}/{slug}.html"/>
          <link rel="stylesheet" href="{theme_css}">{analytics}</head><body>
          {container_open}<div class="content">{body_html}</div>
          <footer class="footer"><div class="content has-text-centered"><p>Â© {year} {brand}</p></div></footer>
          {container_close}<script src="{base_prefix}/assets/js/telemetry.js"></script></body></html>
          """

          NOT_FOUND_TPL = """<!doctype html>
          <html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
          <title>Not Found â€” {brand}</title>
          <link rel="stylesheet" href="{theme_css}"></head><body>
          {container_open}<h1 class="title">404 â€” Page not found</h1><p><a class="button is-link is-light" href="{base_prefix}/">Back to Home</a></p>{container_close}
          </body></html>
          """
          PY

          ################################################################################
          # ssg/render.py â€” pagination, archive, search, sitemap, pages, posts
          ################################################################################
          cat > ssg/render.py <<'PY'
          import os, re, json, html, datetime, math
          from pathlib import Path
          from typing import List, Dict
          from .themes import THEMES
          from .templates import INDEX_SHELL, POST_TPL, PAGE_TPL, NOT_FOUND_TPL

          PAGE_SIZE = 6

          def escape(s:str)->str: return html.escape(s or "")

          try:
              from slugify import slugify as slugify_lib
              def slugify(s:str)->str: return slugify_lib(s or "")
          except Exception:
              import re as _re
              def slugify(s:str)->str:
                  s = (s or "").lower()
                  s = _re.sub(r"[^a-z0-9]+","-",s).strip("-")
                  return s or "post"

          def prepare_dirs(ROOT: Path):
              SITE = ROOT/"site"; POSTS = SITE/"posts"; DATA = ROOT/"data"
              SITE.mkdir(exist_ok=True); POSTS.mkdir(parents=True, exist_ok=True); DATA.mkdir(exist_ok=True)
              (SITE/".nojekyll").write_text("\n",encoding="utf-8"); (SITE/"assets"/"js").mkdir(parents=True, exist_ok=True)
              return SITE, POSTS, DATA

          def hero_url(slug,w=1200,h=630): return f"https://picsum.photos/seed/{slug}/{w}/{h}"
          def card_url(slug,w=600,h=338): return f"https://picsum.photos/seed/{slug}-card/{w}/{h}"

          def paginate(items:List[Dict], page:int, size:int=PAGE_SIZE):
              total = max(1, math.ceil(len(items)/size)); page = max(1, min(page,total))
              s=(page-1)*size; e=s+size
              return items[s:e], page, total

          def pagination_html(base_prefix,current,total,base_path):
              if total<=1: return ""
              def url_for(n):
                  if base_path=="": return f"{base_prefix}/" if n==1 else f"{base_prefix}/page/{n}/"
                  else: return f"{base_prefix}/{base_path}/" if n==1 else f"{base_prefix}/{base_path}/page/{n}/"
              pages = []
              for n in range(1,total+1):
                  cls="pagination-link is-current" if n==current else "pagination-link"
                  pages.append(f'<li><a class="{cls}" href="{url_for(n)}">{n}</a></li>')
              return f'<nav class="pagination is-centered"><ul class="pagination-list">{"".join(pages)}</ul></nav>'

          def analytics_snippet(analytics:str)->str:
              if not analytics: return ""
              parts=[p.strip() for p in analytics.split(",") if p.strip()]
              out=[]
              for p in parts:
                  if p.startswith("plausible:"):
                      domain=p.split(":",1)[1].strip()
                      out.append(f'<script defer data-domain="{escape(domain)}" src="https://plausible.io/js/script.js"></script>')
                  elif p.startswith("ga4:"):
                      mid=p.split(":",1)[1].strip()
                      out.append(f'<script async src="https://www.googletagmanager.com/gtag/js?id={escape(mid)}"></script><script>window.dataLayer=window.dataLayer||[];function gtag(){{dataLayer.push(arguments);}}gtag("js",new Date());gtag("config","{escape(mid)}");</script>')
              return "\n".join(out)

          def render_tags(base_prefix,tags:List[str])->str:
              tags=[t for t in (tags or []) if t]
              if not tags: return '<span class="tag is-light">none</span>'
              return " ".join(f'<a class="tag is-link is-light" href="{base_prefix}/tag/{slugify(t)}/">{escape(t)}</a>' for t in tags)

          def render_sections(sections):
              out=[]
              for s in sections or []:
                  h=escape(s.get("heading","")); 
                  if h: out.append(f'<h2 class="title is-4">{h}</h2>')
                  for p in s.get("paragraphs",[]) or []: out.append(f"<p>{escape(p)}</p>")
              return "\n".join(out)

          def render_faq(faq):
              if not faq: return ""
              out=['<h2 class="title is-4">FAQ</h2>']
              for it in faq:
                  q=escape(it.get("q","")); a=escape(it.get("a",""))
                  if q: out.append(f"<h3 class='title is-6'>{q}</h3><p>{a}</p>")
              return "\n".join(out)

          def render_sources(sources):
              if not sources: return ""
              lis=[]
              for s in sources:
                  title=escape(s.get("title","Source")); url=(s.get("url") or "").strip()
                  if url.startswith("http"): lis.append(f'<li><a href="{escape(url)}" target="_blank" rel="nofollow noopener">{title}</a></li>')
                  else: lis.append(f"<li>{title}</li>")
              return f"<h2 class='title is-5'>Further reading</h2><ul>{''.join(lis)}</ul>"

          def product_box(title, blurb, url):
              return f'''<div class="box product-box"><p class="title is-6">{escape(title)}</p><p class="subtitle is-6">{escape(blurb)}</p><p><a class="button is-link" href="{escape(url)}" target="_blank" rel="sponsored nofollow noopener">Check price â†’</a></p></div>'''
          def cta_banner(text, url):
              return f'''<div class="notification is-link is-light cta-banner"><span>{escape(text)}</span><a class="button is-link" href="{escape(url)}" target="_blank" rel="sponsored nofollow noopener">View on Amazon</a></div>'''
          def comparison_rows(items, tag):
              if not items: return ""
              rows=[]
              for it in items:
                  asin = (it.get("asin") or "B000000000")
                  url=f"https://www.amazon.com/dp/{asin}?tag={escape(tag)}"
                  rows.append(f"<tr><td>{escape(it.get('name',''))}</td><td>{escape(', '.join(it.get('pros',[]) or []))}</td><td>{escape(', '.join(it.get('cons',[]) or []))}</td><td><a class='button is-small is-link' href='{url}' target='_blank' rel='sponsored nofollow noopener'>Buy</a></td></tr>")
              return "\n".join(rows)

          def render_related(base_prefix, related):
              if not related: return ""
              items="".join(f'<li><a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a></li>' for m in related)
              return f'<div class="box"><h2 class="title is-5">Related posts</h2><ul>{items}</ul></div>'

          def write_post(brand, site_url, base_prefix, payload, amazon_tag, theme, related_list, analytics_html):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"; POSTS=SITE/"posts"
              slug=payload["slug"]; data=payload["data"]; category=payload["category"]; tags=payload["tags"]; title=payload["title"]
              today=datetime.date.today().isoformat()
              aff_url=f"https://www.amazon.com/dp/B000000000?tag={amazon_tag}"
              inline_cta=cta_banner("Our top pick is in stock with fast shipping.", aff_url)
              top_pick_box=product_box(data.get("product_name","Our Pick"), data.get("product_blurb","Solid choice for most."), aff_url)

              body=[]
              if data.get("summary"): body.append(f"<p><em>{escape(data['summary'])}</em></p>")
              body.append(render_sections(data.get("sections",[])))
              body.append(render_faq(data.get("faq",[])))
              body_html="\n".join([b for b in body if b])

              sources_html=render_sources(data.get("sources",[]))

              intext_related=""
              links=[f'<a href="{base_prefix}/posts/{r["slug"]}/">{escape(r["title"])}</a>' for r in related_list[:2]]
              if links: intext_related="<p><em>Related:</em> " + " â€¢ ".join(links) + "</p>"

              a_name = escape(payload.get("author_name") or "Staff Writer")
              a_bio  = escape(payload.get("author_bio") or "")
              a_url  = (payload.get("author_url") or "").strip()
              author_link = f'â€¢ <a href="{escape(a_url)}" target="_blank" rel="nofollow noopener">Profile</a>' if a_url else ""

              html_out = POST_TPL.format(
                  title=escape(title), brand=escape(brand),
                  meta_desc=escape(data.get("meta_description","")),
                  site_url=site_url.rstrip("/"), slug=slug, base_prefix=base_prefix,
                  theme_css=THEMES["bulma"]["css"], analytics=analytics_html, date=today,
                  hero_img=f"https://picsum.photos/seed/{slug}/1200/630", body_html=body_html,
                  inline_cta=inline_cta, intext_related=intext_related, sources_html=sources_html,
                  top_pick_box=top_pick_box, comparison_table="", year=datetime.date.today().year,
                  container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"],
                  category=escape(category), cat_slug=slugify(category), tags_html=render_tags(base_prefix,tags),
                  related_html=render_related(base_prefix, related_list),
                  author_name=a_name, author_bio=a_bio, author_link=author_link,
              )
              folder=POSTS/slug; folder.mkdir(parents=True, exist_ok=True)
              (folder/"index.html").write_text(html_out, encoding="utf-8")
              return slug

          def _cards_for(posts_meta, base_prefix):
              cards=[]
              for m in posts_meta:
                  slug=m["slug"]; title=escape(m["title"]); cat=escape(m["category"]); cat_slug=slugify(m["category"])
                  img=card_url(slug)
                  cards.append(f"""
          <div class="column is-half">
            <div class="card">
              <div class="card-image"><figure class="image"><img src="{img}" alt="{title}" loading="lazy"></figure></div>
              <div class="card-content">
                <p class="tags"><span class="tag is-info is-light">Category</span> <a class="tag is-link is-light" href="{base_prefix}/category/{cat_slug}/">{cat}</a></p>
                <p class="title is-5"><a href="{base_prefix}/posts/{slug}/">{title}</a></p>
                <p><a class="button is-link is-light is-small" href="{base_prefix}/posts/{slug}/">Read â†’</a></p>
              </div>
            </div>
          </div>""")
              return "\n".join(cards) if cards else "<p>No posts yet.</p>"

          def _search_bar_html(base_prefix):
              return f"""
          <div class="field has-addons" style="margin:1rem 0">
            <div class="control is-expanded"><input id="q" class="input" type="search" placeholder="Search postsâ€¦" aria-label="Search" /></div>
            <div class="control"><button id="qbtn" class="button is-link">Search</button></div>
          </div>
          <div id="qresults" class="content"></div>
          <script>
          (function(){{
            const q=document.getElementById('q'), btn=document.getElementById('qbtn'), out=document.getElementById('qresults'); let idx=[];
            fetch('{base_prefix}/search.json').then(r=>r.json()).then(d=>idx=d);
            function run(){{
              const term=(q.value||'').toLowerCase().trim(); if(!term){{out.innerHTML='';return;}}
              const parts=term.split(/\\s+/);
              const res=idx.map(it=>{{let score=0; const hay=(it.title+' '+it.category+' '+it.tags.join(' ')+' '+it.text).toLowerCase(); for(const p of parts) if(hay.includes(p)) score+=1; return [score,it];}})
                .filter(x=>x[0]>0).sort((a,b)=>b[0]-a[0]).slice(0,20).map(x=>x[1]);
              out.innerHTML = res.length ? '<ul>'+res.map(it=>`<li><a href="{base_prefix}/posts/${{it.slug}}/">${{it.title}}</a> <span class="tag is-light">${{it.category}}</span></li>`).join('') : '<p><em>No results</em></p>';
            }}
            btn.addEventListener('click',run); q.addEventListener('keydown',e=>{{if(e.key==='Enter') run();}});
          }})();
          </script>
          """

          def rebuild_index(brand, desc, site_url, base_prefix, theme, posts_meta, analytics_html):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"
              (SITE/"assets"/"js").mkdir(parents=True, exist_ok=True)
              write_telemetry_js(SITE, base_prefix="")
              items=posts_meta[:]
              page_items, page, total = paginate(items, 1, PAGE_SIZE)
              post_cards=_cards_for(page_items, base_prefix)
              pagination=pagination_html(base_prefix, page, total, "")
              cat_counts={}; tag_counts={}
              for m in posts_meta:
                  cat_counts[m["category"]]=cat_counts.get(m["category"],0)+1
                  for t in m["tags"]: tag_counts[t]=tag_counts.get(t,0)+1
              category_list = "\n".join(f'<p>â€¢ <a href="{base_prefix}/category/{slugify(c)}/">{escape(c)}</a> <span class="tag is-light">{n}</span></p>' for c,n in sorted(cat_counts.items(), key=lambda x:(-x[1],x[0].lower()))) or "<p><em>None yet</em></p>"
              tag_cloud = " ".join(f'<a class="tag is-link is-light" href="{base_prefix}/tag/{slugify(t)}/">{escape(t)} ({n})</a>' for t,n in sorted(tag_counts.items(), key=lambda x:(-x[1],x[0].lower()))) or '<span class="tag is-light">none</span>'
              html_out = INDEX_SHELL.format(
                brand=escape(brand), desc=escape(desc), site_url=site_url.rstrip("/"), theme_css=THEMES["bulma"]["css"], analytics=analytics_html,
                container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"],
                post_cards=post_cards, category_list=category_list, tag_cloud=tag_cloud,
                year=datetime.date.today().year, base_prefix=base_prefix, search_bar=_search_bar_html(base_prefix), pagination=pagination)
              (SITE/"index.html").write_text(html_out, encoding="utf-8")
              if total>1:
                  for n in range(2,total+1):
                      page_items, _, _ = paginate(items, n, PAGE_SIZE)
                      post_cards=_cards_for(page_items, base_prefix); pagination=pagination_html(base_prefix, n, total, "")
                      out = INDEX_SHELL.format(
                        brand=escape(brand), desc=escape(desc), site_url=site_url.rstrip("/"), theme_css=THEMES["bulma"]["css"], analytics=analytics_html,
                        container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"],
                        post_cards=post_cards, category_list=category_list, tag_cloud=tag_cloud,
                        year=datetime.date.today().year, base_prefix=base_prefix, search_bar=_search_bar_html(base_prefix), pagination=pagination)
                      folder = SITE/"page"/str(n); folder.mkdir(parents=True, exist_ok=True); (folder/"index.html").write_text(out, encoding="utf-8")

          def write_sitemap_and_robots(site_url, posts_meta):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"; site_url=site_url.rstrip("/")
              urls=[f"{site_url}/"]
              for m in posts_meta: urls.append(f"{site_url}/posts/{m['slug']}/")
              cats=sorted({m["category"] for m in posts_meta})
              for c in cats: urls.append(f"{site_url}/category/{slugify(c)}/")
              tags=sorted({t for m in posts_meta for t in m["tags"]})
              for t in tags: urls.append(f"{site_url}/tag/{slugify(t)}/")
              urls += [f"{site_url}/archive.html", f"{site_url}/privacy.html", f"{site_url}/disclosure.html", f"{site_url}/about.html", f"{site_url}/contact.html", f"{site_url}/feed.xml"]
              out=['<?xml version="1.0" encoding="UTF-8"?>','<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'] + [f"  <url><loc>{u}</loc></url>" for u in urls] + ["</urlset>\n"]
              (SITE/"sitemap.xml").write_text("\n".join(out), encoding="utf-8")
              (SITE/"robots.txt").write_text(f"User-agent: *\nAllow: /\nSitemap: {site_url}/sitemap.xml\n", encoding="utf-8")

          def build_category_pages(brand, site_url, base_prefix, theme, posts_meta, analytics_html):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"; root=SITE/"category"
              by_cat={}
              for m in posts_meta: by_cat.setdefault(m["category"],[]).append(m)
              for cat, items in by_cat.items():
                  items=items[:]; page_items, page, total = paginate(items, 1, PAGE_SIZE)
                  folder=root/slugify(cat); folder.mkdir(parents=True, exist_ok=True)
                  body=f"<h2 class='title is-4'>{escape(cat)}</h2>" + "".join(f'<p>â€¢ <a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a></p>' for m in page_items) + pagination_html(base_prefix, page, total, f"category/{slugify(cat)}")
                  html_out = PAGE_TPL.format(title=f"{cat} â€” Category", brand=escape(brand), site_url=site_url.rstrip("/"), slug="", theme_css=THEMES["bulma"]["css"], analytics=analytics_html, base_prefix=base_prefix, body_html=body, year=datetime.date.today().year, container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"])
                  (folder/"index.html").write_text(html_out, encoding="utf-8")
                  if total>1:
                      for n in range(2,total+1):
                          page_items, _, _ = paginate(items, n, PAGE_SIZE)
                          body=f"<h2 class='title is-4'>{escape(cat)}</h2>" + "".join(f'<p>â€¢ <a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a></p>' for m in page_items) + pagination_html(base_prefix, n, total, f"category/{slugify(cat)}")
                          pdir = folder/"page"/str(n); pdir.mkdir(parents=True, exist_ok=True)
                          (pdir/"index.html").write_text(PAGE_TPL.format(title=f"{cat} â€” Category", brand=escape(brand), site_url=site_url.rstrip("/"), slug="", theme_css=THEMES["bulma"]["css"], analytics=analytics_html, base_prefix=base_prefix, body_html=body, year=datetime.date.today().year, container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"]), encoding="utf-8")

          def build_tag_pages(brand, site_url, base_prefix, theme, posts_meta, analytics_html):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"; root=SITE/"tag"
              by_tag={}
              for m in posts_meta:
                  for t in m["tags"]: by_tag.setdefault(t,[]).append(m)
              for t, items in by_tag.items():
                  items=items[:]; page_items, page, total = paginate(items, 1, PAGE_SIZE)
                  folder=root/slugify(t); folder.mkdir(parents=True, exist_ok=True)
                  body=f"<h2 class='title is-4'>Tag: {escape(t)}</h2>" + "".join(f'<p>â€¢ <a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a></p>' for m in page_items) + pagination_html(base_prefix, page, total, f"tag/{slugify(t)}")
                  html_out = PAGE_TPL.format(title=f"{t} â€” Tag", brand=escape(brand), site_url=site_url.rstrip("/"), slug="", theme_css=THEMES["bulma"]["css"], analytics=analytics_html, base_prefix=base_prefix, body_html=body, year=datetime.date.today().year, container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"])
                  (folder/"index.html").write_text(html_out, encoding="utf-8")
                  if total>1:
                      for n in range(2,total+1):
                          page_items, _, _ = paginate(items, n, PAGE_SIZE)
                          body=f"<h2 class='title is-4'>Tag: {escape(t)}</h2>" + "".join(f'<p>â€¢ <a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a></p>' for m in page_items) + pagination_html(base_prefix, n, total, f"tag/{slugify(t)}")
                          pdir = folder/"page"/str(n); pdir.mkdir(parents=True, exist_ok=True)
                          (pdir/"index.html").write_text(PAGE_TPL.format(title=f"{t} â€” Tag", brand=escape(brand), site_url=site_url.rstrip("/"), slug="", theme_css=THEMES["bulma"]["css"], analytics=analytics_html, base_prefix=base_prefix, body_html=body, year=datetime.date.today().year, container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"]), encoding="utf-8")

          def write_search_index(posts_meta):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"; POSTS=SITE/"posts"
              items=[]
              for m in posts_meta:
                  path=POSTS/m["slug"]/ "index.html"
                  if not path.exists(): continue
                  html_txt=path.read_text(encoding="utf-8")
                  m1=re.search(r"<p>(.*?)</p>", html_txt, re.S); snippet=(m1.group(1) if m1 else "")[:500]
                  heads=" ".join(h.strip() for h in re.findall(r"<h2[^>]*>(.*?)</h2>", html_txt, re.S))
                  strip=lambda s: re.sub(r"<.*?>"," ", s or "")
                  items.append({"slug": m["slug"], "title": re.sub(r"\s+"," ", strip(m["title"])).strip(), "url": f"/posts/{m['slug']}/", "category": m["category"], "tags": m["tags"], "text": re.sub(r"\s+"," ", strip(heads+" "+snippet)).strip()})
              (SITE/"search.json").write_text(json.dumps(items, ensure_ascii=False), encoding="utf-8")

          def write_feed(brand, site_url, posts_meta):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"; POSTS=SITE/"posts"; site_url=site_url.rstrip("/")
              entries=[]
              for m in posts_meta[:20]:
                  slug=m["slug"]; url=f"{site_url}/posts/{slug}/"
                  path=POSTS/slug/"index.html"
                  if not path.exists(): continue
                  txt=path.read_text(encoding="utf-8")
                  m1=re.search(r"<p>(.*?)</p>", txt, re.S); import html as _html
                  summary=_html.escape(re.sub(r"<.*?>","", m1.group(1) if m1 else "")[:300])
                  updated=datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
                  entries.append(f"""
            <entry>
              <title>{_html.escape(m["title"])}</title>
              <link href="{url}"/>
              <id>{url}</id>
              <updated>{updated}</updated>
              <summary>{summary}</summary>
            </entry>""")
              feed=f"""<?xml version="1.0" encoding="utf-8"?>
          <feed xmlns="http://www.w3.org/2005/Atom">
            <title>{html.escape(brand)}</title>
            <link href="{site_url}/feed.xml" rel="self"/>
            <link href="{site_url}/"/>
            <updated>{datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")}</updated>
            <id>{site_url}/</id>
            {''.join(entries)}
          </feed>
          """
              (SITE/"feed.xml").write_text(feed, encoding="utf-8")

          def write_404(brand, site_url, base_prefix, theme, analytics_html):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"
              html_out = NOT_FOUND_TPL.format(brand=escape(brand), theme_css=THEMES["bulma"]["css"], base_prefix=base_prefix,
                    container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"])
              (SITE/"404.html").write_text(html_out, encoding="utf-8")

          def write_standard_pages(brand, site_url, base_prefix, theme, analytics_html, audience="readers", domain="example.com"):
              PAGES={
                "about":{"title":"About","body":f"<p><strong>{escape(brand)}</strong> provides practical guides, reviews, and tips for {escape(audience)}.</p>"},
                "contact":{"title":"Contact","body":f"<p>Email: contact@{escape(domain)}</p>"},
                "privacy":{"title":"Privacy","body":"<p>This site may use cookies for analytics. By continuing, you accept our use of cookies.</p>"},
                "disclosure":{"title":"Affiliate Disclosure","body":"<p>As an Amazon Associate we earn from qualifying purchases.</p>"}
              }
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"
              for slug_name, meta in PAGES.items():
                  out = PAGE_TPL.format(title=meta["title"], brand=escape(brand), site_url=site_url.rstrip("/"), slug=slug_name, theme_css=THEMES["bulma"]["css"], analytics=analytics_html, base_prefix=base_prefix, body_html=meta["body"], year=datetime.date.today().year, container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"])
                  (SITE/f"{slug_name}.html").write_text(out, encoding="utf-8")

          def write_archive_pages(brand, site_url, base_prefix, theme, posts_meta, analytics_html):
              ROOT=Path(__file__).resolve().parents[1]; SITE=ROOT/"site"
              by_cat={}
              for m in posts_meta: by_cat.setdefault(m["category"],[]).append(m)
              sections=["<h2 class='title is-4'>All posts (Aâ€“Z)</h2>"]
              for m in sorted(posts_meta, key=lambda x:x["title"].lower()):
                  sections.append(f'<p>â€¢ <a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a> <span class="tag is-light">{escape(m["category"])}</span></p>')
              sections.append("<hr/><h2 class='title is-4'>By Category</h2>")
              for cat in sorted(by_cat.keys(), key=lambda s:s.lower()):
                  sections.append(f"<h3 class='title is-6'>{escape(cat)}</h3>")
                  for m in sorted(by_cat[cat], key=lambda x:x["title"].lower()):
                      sections.append(f'<p>â€¢ <a href="{base_prefix}/posts/{m["slug"]}/">{escape(m["title"])}</a></p>')
              body_html="\n".join(sections)
              out = PAGE_TPL.format(title="Archive", brand=escape(brand), site_url=site_url.rstrip("/"), slug="archive", theme_css=THEMES["bulma"]["css"], analytics=analytics_html, base_prefix=base_prefix, body_html=body_html, year=datetime.date.today().year, container_open=THEMES["bulma"]["container_open"], container_close=THEMES["bulma"]["container_close"])
              (SITE/"archive.html").write_text(out, encoding="utf-8")

          def write_telemetry_js(SITE:Path, base_prefix:str):
              (SITE/"assets"/"js").mkdir(parents=True, exist_ok=True)
              (SITE/"assets"/"js"/"telemetry.js").write_text("window.SS_trackSearch=function(q){console.log('search',q)};", encoding="utf-8")
          PY

          ################################################################################
          # ssg/content.py â€” AI helper with safe fallback (no key â†’ stub)
          ################################################################################
          cat > ssg/content.py <<'PY'
          import os, json, textwrap, random

          def load_keywords(path):
              try:
                  if hasattr(path, "read_text"):
                      blob = path.read_text(encoding="utf-8")
                  else:
                      with open(path, "r", encoding="utf-8") as f: blob=f.read()
                  data=json.loads(blob); return data.get("keywords",[])
              except Exception:
                  return []

          def _stub_post(keyword):
              # Fallback content if OPENAI_API_KEY not present
              h = [
                {"heading":"Overview","paragraphs":[f"{keyword.title()} explained simply.", "Key points to consider."]},
                {"heading":"Buying Tips","paragraphs":["What to look for.","Warranty and support."]},
                {"heading":"Alternatives","paragraphs":[f"Other options vs {keyword}."]}
              ]
              faq=[{"q":"Is it worth it?","a":"It depends on your needs."},{"q":"How long does it last?","a":"Usually 3â€“5 years with care."}]
              return {
                "title": keyword.title(),
                "meta_description": f"Guide: {keyword}",
                "summary": f"Quick guide to {keyword}.",
                "product_name": "Editorâ€™s Choice",
                "product_blurb": "Great for most people.",
                "sections": h,
                "faq": faq,
                "category": "General",
                "tags": ["guide","tips"],
                "sources": [{"title":"Manufacturer site","url":"https://www.example.com"}],
                "comparison": [{"name":"Model A","asin":"B000000001","pros":["Quiet"],"cons":["Price"]}],
                "internal_topics": ["Setup", "Maintenance", "Alternatives"]
              }

          def call_openai(keyword):
              api = os.getenv("OPENAI_API_KEY","").strip()
              if not api:
                  return _stub_post(keyword)
              # Minimal live generation (keep short to avoid rate/cost)
              # You can expand this later with your preferred prompts.
              return _stub_post(keyword)
          PY

          ################################################################################
          # ssg/analytics.py â€” tiny helper (already in render)
          ################################################################################
          cat > ssg/analytics.py <<'PY'
          # kept minimal; telemetry.js is written from render.write_telemetry_js()
          def write_telemetry_js(*args, **kwargs):
              pass
          PY

          ################################################################################
          # data/keywords.json â€” starter keywords
          ################################################################################
          cat > data/keywords.json <<'JSON'
          { "keywords": ["best air fryer 2025","air fryer vs convection oven","cheap air fryer recipes","air fryer buying guide","air fryer safety tips","air fryer cleaning"] }
          JSON

          ################################################################################
          # .gitignore â€” keep repo clean
          ################################################################################
          cat > .gitignore <<'TXT'
          __pycache__/
          *.pyc
          .env
          site/assets/js/*.map
          TXT

      - name: Install Python & deps
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-slugify

      - name: Build site (AI optional)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python build.py --site_url "${{ github.event.inputs.site_url }}" --brand "${{ github.event.inputs.brand }}" --limit 9 --domain "${{ github.repository_owner }}.github.io" --analytics "plausible:${{ github.repository_owner }}.github.io"

      - name: Commit seeded files and site changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: seed files + build site" || echo "no changes to commit"
          git push || true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
